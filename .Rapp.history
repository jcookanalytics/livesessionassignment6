aodata$tonnes <- gsub("\xca", "", aodata$tonnes)#
aodata$tonnes <- gsub(", tonnes \\(\\)", '', aodata$tonnes)#
aodata$tonnes <- as.numeric(aodata$tonnes)#
aodata$year <- 2009
apples <- aodata[aodata$productnumber == 2617, c(1,2,5)]#
str(apples)    # should be 174 rows, 3 variables#
names(apples[3] <- "apples")
names(apples)[3] <- "apples")
names(apples)[3] <- "apples"
oranges <- aodata[aodata$productnumber == 2611, c(2,5)]#
names(oranges)[2] <- "oranges"#
str(oranges)    # should be 174 rows, 2 variables
oranges[oranges$oranges is.na()]
oranges[oranges$oranges[is.na()]]
oranges[is.na(oranges$oranges)]
oranges[,is.na(oranges$oranges)]
oranges[is.na(oranges$oranges),]
apples[apples$countrynumber == 213]
apples[apples$countrynumber == 213, ]
str(aodata)
aodata[is.na(aodata$tonnes)]
aodata[is.na(aodata$tonnes), ]
oranges[oranges$countrynumber = 28]
oranges[oranges$countrynumber == 28]
aodata[aodata$countrynumber == 28]
aodata[aodata$countrynumber == 28, ]
install.packages("reshape2")#
library(reshape2)#
#
cleanao3 <- dcast(aodata[, c(1:3,5)], formula = country + countrynumber ~ products, value.var="tonnes")#
#
names(cleanao3)[3:4] <- c("apples", "Oranges")#
#
cleannao2[!(complete.cases(cleanao2)),]#
#
cleannao3[!(complete.cases(cleanao3)),]#
#
table(aodata$country)[table(aodata$country) == 1]
cleanao2 <- merge(apples, oranges, by="countrynumber", all=TRUE)#
#
install.packages("reshape2")#
library(reshape2)#
#
cleanao3 <- dcast(aodata[, c(1:3,5)], formula = country + countrynumber ~ products, value.var="tonnes")#
#
names(cleanao3)[3:4] <- c("apples", "Oranges")#
#
cleannao2[!(complete.cases(cleanao2)),]#
#
cleannao3[!(complete.cases(cleanao3)),]#
#
table(aodata$country)[table(aodata$country) == 1]
cleanao2 <- merge(apples, oranges, by="countrynumber", all=TRUE)#
#
install.packages("reshape2")#
library(reshape2)#
#
cleanao3 <- dcast(aodata[, c(1:3,5)], formula = country + countrynumber ~ products, value.var="tonnes")#
#
names(cleanao3)[3:4] <- c("apples", "Oranges")#
#
cleanao2[!(complete.cases(cleanao2)),]#
#
cleanao3[!(complete.cases(cleanao3)),]#
#
table(aodata$country)[table(aodata$country) == 1]
ls()
remove.files(ls())
remove.file(ls())
file.remove(ls())
ls()
warnings()
getwd
getwd()
system(ls)
q()
ls()
points <- function((x) {#
    z <- rnorm(x)#
    z2 <- z[z >= -2 & z <= 2]#
    pct <- z2/x#
}
points <- function(x) {#
    z <- rnorm(x)#
    z2 <- z[z >= -2 & z <= 2]#
    pct <- z2/x#
}
points(10)
points <- function(x) {#
    z <- rnorm(x)#
    z2 <- z[z >= -2 & z <= 2]#
    pct <- z2/x#
    return(pct)#
}#
#
point(10)
points(10)
points <- function(x) {#
    z <- rnorm(x)#
    z2 <- z[z >= -2 & z <= 2]#
    pct <- length(z2)/x#
    return(pct)#
}#
#
points(10)
points(50)
points(10)#
points(50)#
points(1000)
points <- function(x) {#
    z <- rnorm(x)#
    z2 <- z[z >= -2 & z <= 2]#
    pct <- (length(z2)/x) * 100#
    return(pct)#
}#
#
points(10)#
points(50)#
points(1000)
q()
library(swirl)
rm(list=ls())
ls()
swirl()
exit
q
q()
system("pwd")
setwd(system("pwd)")
setwd(system("pwd"))
setwd(system("pwd", intern = T) )
getwd()
q()
install.packages("ZillowR")
?ZillowR
??ZillowR
library(ZillowR)
?GetSearchResults
GetSearchResults(address = '7206 Kentwood Avenue', citystatezip='Los Angeles, CA, 90045')
?get_zillow_web_service_id
instal.packages("raincpc")
install.packages("raincpc")
?raincpc
library(raincpc)
?raincpc
cpc_get_rawdata(2014, 2, 19, 2015, 2, 19, usa=TRUE)
ls()
pwd
getwd()
system("ls")
rain1 <- cpc_read_rawdata(2014, 2, 19, usa=TRUE)
?raster
install.packages("raster")
library(raster)
rain1 <- cpc_read_rawdata(2014, 2, 19, usa=TRUE)
rain1
rain1[60,130]
system("ls")
?uninstall
install.packages(madison)
library(devtools)
install_github("expresso/maddison")
library(maddison)
install_github("expersso/maddison")
library(maddison)
str(maddison)
ggplot(maddison, aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_point(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
library(ggplot)
library(gplot)
library(ggplot2)
ggplot2(maddison, aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_point(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
ggplot(maddison, aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_point(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
library(scales)
ggplot(maddison, aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_point(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
yearmin = 1800yearmax = 2000
ggplot(maddison, aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_point(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
yearmin <- to_date(1-1-yearmin)yearmax <- to_date(1-1-yearmax)
yearmin <- as_date(“1800-01-01”)yearmax <- as_date(“2000-01-01”)
yearmin <- to_date(1-1-yearmin)yearmax <- to_date(1-1-yearmax)
yearmin <- as_Date(“1800-01-01”)yearmax <- as_Date(“2000-01-01”)
?as_date
?as_Date
yearmin <- as.Date(“1800-01-01”)yearmax <- as.Date(“2000-01-01”)
?as.Date
yearmin <- as.Date("1800-01-01")yearmax <- as.Date("2000-01-01")
ggplot(maddison, aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_point(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
?/glin
?glin
??glin
?ggplot
ggplot (madison[madison$country %in% countries], aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
ggplot (maddison[maddison$country %in% countries], aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
countries <- c("United States", "France", "Italy", "Mexico")
ggplot (maddison[maddison$country %in% countries], aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=3) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank())
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year) + ylab("GDP per Capita") + ggtitle("Maddison Country GDP per Capita Over Time")
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year) + ggtitle("Maddison Country GDP per Capita Over Time")
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year") + ggtitle("Maddison Country GDP per Capita Over Time")
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = comma) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year") + ggtitle("Maddison Country GDP per Capita Over Time")
library(ggplot2)library(scales)yearmin <- as.Date("1800-01-01")yearmax <- as.Date("2000-01-01")countries <- c("United States", "France", "Italy", "Mexico", "Egypt", "India")ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year") + ggtitle("Maddison Data of Country GDP per Capita Over Time")
ls
ls()
remove.files(list=ls())
rm.files(list=ls())
rm(list=ls())
ls
ls()
q()
library(ggplot2)library(scales)yearmin <- as.Date("1800-01-01")yearmax <- as.Date("2000-01-01")
yearmin <- as.Date("500-01-01")yearmax <- as.Date("2000-01-01")countries <- c("United States", "France", "Italy", "Mexico", "Egypt", "India", "Turkey", "Great Britian", "Norway")ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year") + ggtitle("Maddison Data of Country GDP per Capita Over Time")
library(devtools)install_github(“expersso/maddison”)library(maddison)
ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year") + ggtitle("Maddison Data of Country GDP per Capita Over Time")
maddison$country
maddison$country[maddison$year == as.date("2000-01-01")]
maddison$country[maddison$year == as.Date("2000-01-01")]
maddison$country[maddison$year == as.Date("2000-01-01") &  !is.na(maddison$country)]
countries <- c("United States", "France", "Italy", "Mexico", "Egypt", "India", "Turkey", "United Kingdom", "Norway")ggplot (maddison[maddison$country %in% countries, ], aes(x=year,y=gdp_pc))  + scale_y_continuous(name="GDP per Capita", trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x))) + xlim(yearmin,yearmax) +geom_line(aes(colour=country),size=1) + annotation_logticks(sides="l",scaled=FALSE) +theme(panel.grid.minor.y = element_blank()) +xlab("Year") + ggtitle("Maddison Data of Country GDP per Capita Over Time")
ls()
rm(list=ls())
ls()
q()
getwd()
ls()
system("ls")
bk <- read.xls("rollingsales_queens.xls",pattern="BOROUGH")
install.packages("gdata")
library(plyr)#
library(gdata)
bk <- read.xls("rollingsales_queens.xls",pattern="BOROUGH")
str(bk)
q()
installed.packages()
test <installed.packages()
fred < installed.packages()
fred <- installed.packages()
fred[1]
fred[,1]
remove.packages("ZillowR")
remove.packages("raincpc")
fred <- installed.packages()
fred[,1]
remove.packages("raster")
rm(fred)
ls()
rm(list=ls())
ls()
q()
housing <- read.csv("data/rollingsales_statenisland.csv", header=TRUE)
head(housing)
summary(housing)
str(housing)
rm(housing)
si <- read.csv("data/rollingsales_statenisland.csv", header=TRUE)#
##
# Install (commented out) and load the packages we will need#
##
#
#install.packages("gdata")#
#install.packages("plyr")#
library(plyr)#
library(gdata)#
#
##
# See what is in the data frame#
##
#
head(si)#
summary(si)#
str(si)#
#
##
# Let's work on the sale price data first#
#   If the first character is a number, replace it with a blank#
#   Create a numeric (.N) sale price variable#
#   Determine the nuber of NA sales prices#
##
#
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", bk$SALE.PRICE))#
#
message("The number of missing sales prices is ", count(is.na(si$SALE.PRICE.N)))
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", si$SALE.PRICE))#
#
message("The number of missing sales prices is ", count(is.na(si$SALE.PRICE.N)))
count(is.na(si$SALE.PRICE.N))
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", si$SALE.PRICE))#
#
message("The number of missing sales (TRUE) prices is ",)#
count(is.na(si$SALE.PRICE.N)))
message("The number of missing sales (TRUE) prices is ")#
count(is.na(si$SALE.PRICE.N))
str(count)
test <- count(is.na(si$SALE.PRICE.N))
str(test)
test[2,2]
missingPrices <- count(is.na(si$SALE.PRICE.N))#
#
message("The number of missing sales (TRUE) prices is ",missingPrices[2,2])
message("The number of non-missing sales prices is ",missingPrices[1,2])
names(si) <- tolower(names(si))
##
# Let's work on the square footage data first#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))#
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))#
#
##
# Convert the year built to numeric also#
##
#
si$year.built <- as.numeric(as.character(si$year.built))#
#
##
# Check the sales price data with a histogram#
##
#
hist(si$sales.price.n)
##
# Let's work on the square footage data first#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))#
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))#
#
##
# Convert the year built to numeric also#
##
#
si$year.built <- as.numeric(as.character(si$year.built))#
#
##
# Check the sales price data with a histogram#
##
#
hist(si$sale.price.n)
min(si$sale.price.n)
si.sale <- si[si$sale.price.n!=0,]
min(si.sale$sale.price.n)
min(si.sale$sale.price.n, na.rm=FALSE)
min(si.sale$sale.price.n, na.rm=TRUE)
hist(si$sale.price.n,min(si.sale$sale.price.n, na.rm=TRUE), max(si.sale$sale.price.n, na.rm=TRUE))
max(si.sale$sale.price.n, na.rm=TRUE)
hist(si$sale.price.n,min(si.sale$sale.price.n, na.rm=TRUE), max(si.sale$sale.price.n, na.rm=TRUE), breaks=10)
hist(si$sale.price.n,min(si.sale$sale.price.n, na.rm=TRUE), max(si.sale$sale.price.n, na.rm=TRUE), breaks=100)
hist(si$sale.price.n,breaks=100)
hist(si$sale.price.n,breaks=100)
si.sale <- si[si$sale.price.n!=0,]
plot(si.sale$gross.sqft,si.sale$sale.price.n)
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))
si.sale <- si[si$sale.price.n!=0 & !is.na(si.sale$sale.price),]
min(si.sale$sale.price.n)
plot(si.sale$gross.sqft,si.sale$sale.price.n)
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]#
dim(si.homes)
nrow(si.homes)
message("The number of family homes with sale prices is ", nrow(si.homes))
plot(log10(si.homes$gross.sqft),log10(si.homes$sale.price.n))
summary(si.homes[which(si.homes$sale.price.n<100000),])
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
min(si.homes$gross.sqft)
min(si.homes$gross.sqft, na.rm=TRUE)
si.homes$outliers <- ((log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
si.homes$gross.sqft
si.homes[293,]
si.homes[294,]
si.homes[si.homes$gross.sqft < 100 ]
si.homes[si.homes$gross.sqft < 100,]
si.sale <- si[si$sale.price.n!=0 && !is.na(si.sale$sale.price.n),]
plot(si.sale$gross.sqft,si.sale$sale.price.n)#
#
##
# Due to the tight cluster of points and the few outliers,#
#    Graph the square footage and sales price data on a log-log (base 10) scale#
##
#
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))#
##
# We observe some extremely low prices and a cloud of data#
# Let's separate the "family" building class into a new data frame (si.homes),#
#    determine the size, and make the price-square footage graph again#
##
#
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]#
dim(si.homes)#
message("The number of family homes with sale prices is ", nrow(si.homes))#
plot(log10(si.homes$gross.sqft),log10(si.homes$sale.price.n))#
#
##
# We still observe some extremely low prices and a cloud of data#
#   If we look at homes that sold for less than $100,000, we find 176#
#       with a mean of less than $23,000#
##
#
summary(si.homes[which(si.homes$sale.price.n<100000),])#
#
##
# Let's define as outliers homes selling for less than $100,000#
#   and remove them from our si.homes data frame#
#   We'll include in the outliers homes with less than 100 sq ft#
##
#
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
si.homes[si.homes$gross.sqft < 100,]
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n))
si.sale <- si[si$sale.price.n!=0 & !is.na(si.sale$sale.price.n),]
plot(si.sale$gross.sqft,si.sale$sale.price.n)#
#
##
# Due to the tight cluster of points and the few outliers,#
#    Graph the square footage and sales price data on a log-log (base 10) scale#
##
#
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))#
##
# We observe some extremely low prices and a cloud of data#
# Let's separate the "family" building class into a new data frame (si.homes),#
#    determine the size, and make the price-square footage graph again#
##
#
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]#
dim(si.homes)#
message("The number of family homes with sale prices is ", nrow(si.homes))#
plot(log10(si.homes$gross.sqft),log10(si.homes$sale.price.n))#
#
##
# We still observe some extremely low prices and a cloud of data#
#   If we look at homes that sold for less than $100,000, we find 176#
#       with a mean of less than $23,000#
##
#
summary(si.homes[which(si.homes$sale.price.n<100000),])#
#
##
# Let's define as outliers homes selling for less than $100,000#
#   and remove them from our si.homes data frame#
#   We'll include in the outliers homes with less than 100 sq ft#
##
#
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=(5,9))
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=(5:10))
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
plot(si.sale$gross.sqft,si.sale$sale.price.n)#
#
##
# Due to the tight cluster of points and the few outliers,#
#    Graph the square footage and sales price data on a log-log (base 10) scale#
##
#
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))#
##
# We observe some extremely low prices and a cloud of data#
# Let's separate the "family" building class into a new data frame (si.homes),#
#    determine the size, and make the price-square footage graph again#
##
#
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]#
dim(si.homes)#
message("The number of family homes with sale prices is ", nrow(si.homes))#
plot(log10(si.homes$gross.sqft),log10(si.homes$sale.price.n))#
#
##
# We still observe some extremely low prices and a cloud of data#
#   If we look at homes that sold for less than $100,000, we find 176#
#       with a mean of less than $23,000#
##
#
summary(si.homes[which(si.homes$sale.price.n<100000),])#
#
##
# Let's define as outliers homes selling for less than $100,000#
#   and remove them from our si.homes data frame#
#   We'll include in the outliers homes with less than 100 sq ft#
##
#
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
##
# Load the csv file into a data frame#
##
#
si <- read.csv("data/rollingsales_statenisland.csv", header=TRUE)#
##
# Install (commented out) and load the packages we will need#
##
#
#install.packages("gdata")#
#install.packages("plyr")#
#
library(plyr)#
library(gdata)#
#
##
# See what is in the data frame#
##
#
head(si)#
summary(si)#
str(si)#
#
##
# Let's work on the sale price data first#
#   If the first character is a number, replace it with a blank#
#   Create a numeric (.N) sale price variable#
#   Determine the number of NA sales prices#
##
#
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", si$SALE.PRICE))#
missingPrices <- count(is.na(si$SALE.PRICE.N))#
#
message("The number of missing sales prices is     ",missingPrices[2,2])#
message("The number of non-missing sales prices is ",missingPrices[1,2])#
##
# Change all the variable names to lower case#
##
#
names(si) <- tolower(names(si)#
##
# Let's work on the square footage data first#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))#
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))#
#
##
# Convert the year built to numeric also#
##
#
si$year.built <- as.numeric(as.character(si$year.built))#
#
##
# Check the sales price data with a histogram#
##
#
hist(si$sale.price.n,min(si.sale$sale.price.n, na.rm=TRUE), max(si.sale$sale.price.n, na.rm=TRUE))#
#
##
# Copy the data with non-zero and non-null sale prices into a new data frame#
##
#
si.sale <- si[si$sale.price.n!=0 & !is.na(si.sale$sale.price.n),]
names(si) <- tolower(names(si))#
##
# Let's work on the square footage data first#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))#
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))#
#
##
# Convert the year built to numeric also#
##
#
si$year.built <- as.numeric(as.character(si$year.built))#
#
##
# Check the sales price data with a histogram#
##
#
hist(si$sale.price.n,min(si.sale$sale.price.n, na.rm=TRUE), max(si.sale$sale.price.n, na.rm=TRUE))#
#
##
# Copy the data with non-zero and non-null sale prices into a new data frame#
##
#
si.sale <- si[si$sale.price.n!=0 & !is.na(si.sale$sale.price.n),]
si.sale <- si[(si$sale.price.n!=0 & !is.na(si.sale$sale.price.n)),]
plot(si.sale$gross.sqft,si.sale$sale.price.n)#
#
##
# Due to the tight cluster of points and the few outliers,#
#    Graph the square footage and sales price data on a log-log (base 10) scale#
##
#
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))#
##
# We observe some extremely low prices and a cloud of data#
# Let's separate the "family" building class into a new data frame (si.homes),#
#    determine the size, and make the price-square footage graph again#
##
#
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]#
dim(si.homes)#
message("The number of family homes with sale prices is ", nrow(si.homes))#
plot(log10(si.homes$gross.sqft),log10(si.homes$sale.price.n))#
#
##
# We still observe some extremely low prices and a cloud of data#
#   If we look at homes that sold for less than $100,000, we find 176#
#       with a mean of less than $23,000#
##
#
summary(si.homes[which(si.homes$sale.price.n<100000),])#
#
##
# Let's define as outliers homes selling for less than $100,000#
#   and remove them from our si.homes data frame#
#   We'll include in the outliers homes with less than 100 sq ft#
##
#
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
##
# Load the csv file into a data frame#
##
#
si <- read.csv("data/rollingsales_statenisland.csv", header=TRUE)#
##
# Install (commented out) and load the packages we will need#
##
#
#install.packages("gdata")#
#install.packages("plyr")#
#
library(plyr)#
library(gdata)#
#
##
# See what is in the data frame#
##
#
head(si)#
summary(si)#
str(si)#
#
##
# Let's work on the sale price data first#
#   If the first character is a number, replace it with a blank#
#   Create a numeric (.N) sale price variable#
#   Determine the number of NA sales prices#
##
#
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", si$SALE.PRICE))#
missingPrices <- count(is.na(si$SALE.PRICE.N))#
#
message("The number of missing sales prices is     ",missingPrices[2,2])#
message("The number of non-missing sales prices is ",missingPrices[1,2])#
##
# Change all the variable names to lower case#
##
#
names(si) <- tolower(names(si))#
##
# Let's work on the square footage data first#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))#
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))#
#
##
# Convert the year built to numeric also#
##
#
si$year.built <- as.numeric(as.character(si$year.built))#
#
##
# Check the sales price data with a histogram#
##
#
hist(si$sale.price.n,min(si.sale$sale.price.n, na.rm=TRUE), max(si.sale$sale.price.n, na.rm=TRUE))#
#
##
# Copy the data with non-zero and non-null sale prices into a new data frame#
##
#
#  si.sale <- si[(si$sale.price.n!=0 & !is.na(si.sale$sale.price.n)),]#
#
si.sale <- si[si$sale.price.n!=0,]
i <- read.csv("data/rollingsales_statenisland.csv", header=TRUE)#
##
# Install (commented out) and load the packages we will need#
##
#
#install.packages("gdata")#
#install.packages("plyr")#
#
library(plyr)#
library(gdata)#
#
##
# See what is in the data frame#
##
#
head(si)#
summary(si)#
str(si)#
#
##
# Let's work on the sale price data first#
#   If the first character is a number, replace it with a blank#
#   Create a numeric (.N) sale price variable#
#   Determine the number of NA sales prices#
##
#
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", si$SALE.PRICE))#
missingPrices <- count(is.na(si$SALE.PRICE.N))#
#
message("The number of missing sales prices is     ",missingPrices[2,2])#
message("The number of non-missing sales prices is ",missingPrices[1,2])#
##
# Change all the variable names to lower case#
##
#
names(si) <- tolower(names(si))#
##
# Let's work on the square footage data first#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))#
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))#
#
##
# Convert the year built to numeric also#
##
#
si$year.built <- as.numeric(as.character(si$year.built))#
#
##
# Check the sales price data with a histogram#
##
#
hist(si$sale.price.n)#
#
##
# Copy the data with non-zero and non-null sale prices into a new data frame#
##
#
#  si.sale <- si[(si$sale.price.n!=0 & !is.na(si.sale$sale.price.n)),]#
#
si.sale <- si[si$sale.price.n!=0,]
plot(si.sale$gross.sqft,si.sale$sale.price.n)#
#
##
# Due to the tight cluster of points and the few outliers,#
#    Graph the square footage and sales price data on a log-log (base 10) scale#
##
#
plot(log10(si.sale$gross.sqft),log10(si.sale$sale.price.n))#
##
# We observe some extremely low prices and a cloud of data#
# Let's separate the "family" building class into a new data frame (si.homes),#
#    determine the size, and make the price-square footage graph again#
##
#
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]#
dim(si.homes)#
message("The number of family homes with sale prices is ", nrow(si.homes))#
plot(log10(si.homes$gross.sqft),log10(si.homes$sale.price.n))#
#
##
# We still observe some extremely low prices and a cloud of data#
#   If we look at homes that sold for less than $100,000, we find 176#
#       with a mean of less than $23,000#
##
#
summary(si.homes[which(si.homes$sale.price.n<100000),])#
#
##
# Let's define as outliers homes selling for less than $100,000#
#   and remove them from our si.homes data frame#
#   We'll include in the outliers homes with less than 100 sq ft#
##
#
si.homes$outliers <- (log10(si.homes$sale.price.n) <=5 || (si.homes$gross.sqft < 100 )) + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
si.homes$outliers <- log10(si.homes$sale.price.n) <=5  + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
plot(si.homes$gross.sqft,si.homes$sale.price.n)
si.homes$outliers <- log10(si.homes$sale.price.n) <=5  + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
plot(si.homes$gross.sqft,si.homes$sale.price.n)
si.homes$outliers <- log10(si.homes$sale.price.n) <=5  + 0#
si.homes <- si.homes[which(si.homes$outliers==0),]#
#
##
# Let's make our square footage-price graph again with the outliers removed#
#   If the first character is a number, replace it with a blank#
#   Convert to numeric#
##
#
plot(log(si.homes$gross.sqft),log(si.homes$sale.price.n), xlim=range(5:10))
plot(si.homes$gross.sqft,si.homes$sale.price.n)
q()
